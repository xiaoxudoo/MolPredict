{"version":3,"sources":["../../../../source/lib/worksheet/cf/cf_rule.js"],"names":["_","require","CF_RULE_TYPES","CfRule","ruleConfig","type","priority","formula","dxfId","foundType","TypeError","supported","missingProps","reduce","requiredProps","list","prop","get","push","length","join","ele","thisRule","undefined","att","text","up","module","exports"],"mappings":";;;;;;AAAA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,gBAAgBD,QAAQ,iBAAR,CAAtB;;IAEME,M;AAAS;AACX,oBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AACpB,aAAKC,IAAL,GAAYD,WAAWC,IAAvB;AACA,aAAKC,QAAL,GAAgBF,WAAWE,QAA3B;AACA,aAAKC,OAAL,GAAeH,WAAWG,OAA1B;AACA,aAAKC,KAAL,GAAaJ,WAAWI,KAAxB;;AAEA,YAAIC,YAAYP,cAAc,KAAKG,IAAnB,CAAhB;;AAEA,YAAI,CAACI,SAAL,EAAgB;AACZ,kBAAM,IAAIC,SAAJ,CAAc,MAAM,KAAKL,IAAX,GAAkB,mDAAhC,CAAN;AACH;;AAED,YAAI,CAACI,UAAUE,SAAf,EAA0B;AACtB,kBAAM,IAAID,SAAJ,CAAc,kCAAkC,KAAKL,IAAvC,GAA8C,wBAA5D,CAAN;AACH;;AAED,YAAIO,eAAeZ,EAAEa,MAAF,CAASJ,UAAUK,aAAnB,EAAkC,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACjE,gBAAIhB,EAAEiB,GAAF,QAAYD,IAAZ,EAAkB,IAAlB,MAA4B,IAAhC,EAAsC;AAClCD,qBAAKG,IAAL,CAAUF,IAAV;AACH;AACD,mBAAOD,IAAP;AACH,SALkB,EAKhB,EALgB,CAAnB;;AAOA,YAAIH,aAAaO,MAAjB,EAAyB;AACrB,kBAAM,IAAIT,SAAJ,CAAc,iEAAiEE,aAAaQ,IAAb,CAAkB,IAAlB,CAA/E,CAAN;AACH;AACJ;;;;oCAEWC,G,EAAK;AACb,gBAAIC,WAAWD,IAAIA,GAAJ,CAAQ,QAAR,CAAf;AACA,gBAAI,KAAKhB,IAAL,KAAckB,SAAlB,EAA6B;AACzBD,yBAASE,GAAT,CAAa,MAAb,EAAqB,KAAKnB,IAA1B;AACH;AACD,gBAAI,KAAKG,KAAL,KAAee,SAAnB,EAA8B;AAC1BD,yBAASE,GAAT,CAAa,OAAb,EAAsB,KAAKhB,KAA3B;AACH;AACD,gBAAI,KAAKF,QAAL,KAAkBiB,SAAtB,EAAiC;AAC7BD,yBAASE,GAAT,CAAa,UAAb,EAAyB,KAAKlB,QAA9B;AACH;;AAED,gBAAI,KAAKC,OAAL,KAAiBgB,SAArB,EAAgC;AAC5BD,yBAASD,GAAT,CAAa,SAAb,EAAwBI,IAAxB,CAA6B,KAAKlB,OAAlC;AACH;AACDe,qBAASI,EAAT;AACH;;;;;;AAILC,OAAOC,OAAP,GAAiBzB,MAAjB","file":"cf_rule.js","sourcesContent":["const _ = require('lodash');\nconst CF_RULE_TYPES = require('./cf_rule_types');\n\nclass CfRule { // ยง18.3.1.10 cfRule (Conditional Formatting Rule)\n    constructor(ruleConfig) {\n        this.type = ruleConfig.type;\n        this.priority = ruleConfig.priority;\n        this.formula = ruleConfig.formula;\n        this.dxfId = ruleConfig.dxfId;\n\n        let foundType = CF_RULE_TYPES[this.type];\n\n        if (!foundType) {\n            throw new TypeError('\"' + this.type + '\" is not a valid conditional formatting rule type');\n        }\n\n        if (!foundType.supported) {\n            throw new TypeError('Conditional formatting type \"' + this.type + '\" is not yet supported');\n        }\n\n        let missingProps = _.reduce(foundType.requiredProps, (list, prop) => {\n            if (_.get(this, prop, null) === null) {\n                list.push(prop);\n            }\n            return list;\n        }, []);\n\n        if (missingProps.length) {\n            throw new TypeError('Conditional formatting rule is missing required properties: ' + missingProps.join(', '));\n        }\n    }\n\n    addToXMLele(ele) {\n        let thisRule = ele.ele('cfRule');\n        if (this.type !== undefined) {\n            thisRule.att('type', this.type);\n        }\n        if (this.dxfId !== undefined) {\n            thisRule.att('dxfId', this.dxfId);\n        }\n        if (this.priority !== undefined) {\n            thisRule.att('priority', this.priority);\n        }\n\n        if (this.formula !== undefined) {\n            thisRule.ele('formula').text(this.formula);\n        }\n        thisRule.up();\n    }\n}\n\n\nmodule.exports = CfRule;\n"]}