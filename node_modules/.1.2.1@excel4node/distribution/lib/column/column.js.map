{"version":3,"sources":["../../../source/lib/column/column.js"],"names":["utils","require","_","Column","col","ws","collapsed","customWidth","hidden","max","min","outlineLevel","style","colWidth","w","parseInt","TypeError","level","undefined","jumpTo","o","opts","sheetView","pane","state","xSplit","activePane","ySplit","topLeftCell","getExcelCellRef","getExcelRowCol","row","module","exports"],"mappings":";;;;;;AAAA,IAAMA,QAAQC,QAAQ,aAAR,CAAd;AACA,IAAMC,IAAID,QAAQ,QAAR,CAAV;;IAGME,M;AACF;;;;;;;;;;;;;;AAcA,oBAAYC,GAAZ,EAAiBC,EAAjB,EAAqB;AAAA;;AACjB,aAAKA,EAAL,GAAUA,EAAV;AACA,aAAKC,SAAL,GAAiB,IAAjB;AACA,aAAKC,WAAL,GAAmB,IAAnB;AACA,aAAKC,MAAL,GAAc,IAAd;AACA,aAAKC,GAAL,GAAWL,GAAX;AACA,aAAKM,GAAL,GAAWN,GAAX;AACA,aAAKO,YAAL,GAAoB,IAApB;AACA,aAAKC,KAAL,GAAa,IAAb;AACA,aAAKC,QAAL,GAAgB,IAAhB;AACH;;;;;;AAgBD;;;;;;;iCAOSC,C,EAAG;AACR,gBAAIC,SAASD,CAAT,MAAgBA,CAApB,EAAuB;AACnB,qBAAKD,QAAL,GAAgBC,CAAhB;AACA,qBAAKP,WAAL,GAAmB,IAAnB;AACH,aAHD,MAGO;AACH,sBAAM,IAAIS,SAAJ,CAAc,yCAAd,CAAN;AACH;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;;;+BAMO;AACH,iBAAKR,MAAL,GAAc,IAAd;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;8BAQMS,K,EAAOX,S,EAAW;AACpB,gBAAIS,SAASE,KAAT,MAAoBA,KAAxB,EAA+B;AAC3B,qBAAKN,YAAL,GAAoBM,KAApB;AACH,aAFD,MAEO;AACH,sBAAM,IAAID,SAAJ,CAAc,+CAAd,CAAN;AACH;;AAED,gBAAIV,cAAcY,SAAlB,EAA6B;AACzB,uBAAO,IAAP;AACH;;AAED,gBAAI,OAAOZ,SAAP,KAAqB,SAAzB,EAAoC;AAChC,qBAAKA,SAAL,GAAiBA,SAAjB;AACA,qBAAKE,MAAL,GAAcF,SAAd;AACH,aAHD,MAGO;AACH,sBAAM,IAAIU,SAAJ,CAAc,8CAAd,CAAN;AACH;;AAED,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;+BAOOG,M,EAAQ;AACX,gBAAIC,IAAI,KAAKf,EAAL,CAAQgB,IAAR,CAAaC,SAAb,CAAuBC,IAA/B;AACAJ,qBAAS,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,SAAS,KAAKT,GAA5C,GAAkDS,MAAlD,GAA2D,KAAKT,GAAL,GAAW,CAA/E;AACAU,cAAEI,KAAF,GAAU,QAAV;AACAJ,cAAEK,MAAF,GAAW,KAAKf,GAAhB;AACAU,cAAEM,UAAF,GAAe,aAAf;AACAN,cAAEO,MAAF,KAAa,IAAb,GACIP,EAAEQ,WAAF,GAAgB5B,MAAM6B,eAAN,CAAsB,CAAtB,EAAyBV,MAAzB,CADpB,GAEIC,EAAEQ,WAAF,GAAgB5B,MAAM6B,eAAN,CAAsB7B,MAAM8B,cAAN,CAAqBV,EAAEQ,WAAvB,EAAoCG,GAA1D,EAA+DZ,MAA/D,CAFpB;AAGA,mBAAO,IAAP;AACH;;;4BAxFW;AACR,mBAAO,KAAKN,QAAZ;AACH,S;0BAESC,C,EAAG;AACT,gBAAIC,SAASD,CAAT,MAAgBA,CAApB,EAAuB;AACnB,qBAAKD,QAAL,GAAgBC,CAAhB;AACA,qBAAKP,WAAL,GAAmB,IAAnB;AACH,aAHD,MAGO;AACH,sBAAM,IAAIS,SAAJ,CAAc,yCAAd,CAAN;AACH;AACD,mBAAO,KAAKH,QAAZ;AACH;;;;;;AA+ELmB,OAAOC,OAAP,GAAiB9B,MAAjB","file":"column.js","sourcesContent":["const utils = require('../utils.js');\nconst _ = require('lodash');\n\n\nclass Column {\n    /**\n     * Element representing an Excel Column\n     * @param {Number} col Column of cell\n     * @param {Worksheet} Worksheet that contains column\n     * @property {Worksheet} ws Worksheet that contains the specified Column\n     * @property {Boolean} collapsed States whether the column is collapsed if part of a group\n     * @property {Boolean} customWidth States whether or not the column as a width that is not default\n     * @property {Boolean} hidden States whether or not the specified column is hiddent\n     * @property {Number} max The greatest column if part of a range\n     * @property {Number} min The least column if part of a range\n     * @property {Number} outlineLevel The grouping leve of the Column\n     * @property {Number} style ID of style\n     * @property {Number} width Width of the Column\n     */\n    constructor(col, ws) {\n        this.ws = ws;\n        this.collapsed = null;\n        this.customWidth = null;\n        this.hidden = null;\n        this.max = col;\n        this.min = col;\n        this.outlineLevel = null;\n        this.style = null;\n        this.colWidth = null;\n    }\n\n    get width() {\n        return this.colWidth;\n    }\n\n    set width(w) {\n        if (parseInt(w) === w) {\n            this.colWidth = w;\n            this.customWidth = true;\n        } else {\n            throw new TypeError('Column width must be a positive integer');\n        }\n        return this.colWidth;\n    }\n\n    /**\n     * @alias Column.setWidth\n     * @desc Sets teh width of a column\n     * @func Column.setWidth\n     * @param {Number} val New Width of column\n     * @returns {Column} Excel Column with attached methods\n     */\n    setWidth(w) {\n        if (parseInt(w) === w) {\n            this.colWidth = w;\n            this.customWidth = true;\n        } else {\n            throw new TypeError('Column width must be a positive integer');\n        }\n        return this;\n    }\n\n    /**\n     * @alias Column.hide\n     * @desc Sets a Column to be hidden\n     * @func Column.hide\n     * @returns {Column} Excel Column with attached methods\n     */\n    hide() {\n        this.hidden = true;\n        return this;\n    }\n\n    /**\n     * @alias Column.group\n     * @desc Adds column to the specified group\n     * @func Column.group\n     * @param {Number} level Level of excel grouping\n     * @param {Boolean} collapsed States wheter column grouping level should be collapsed by default\n     * @returns {Column} Excel Column with attached methods\n     */\n    group(level, collapsed) {\n        if (parseInt(level) === level) {\n            this.outlineLevel = level;\n        } else {\n            throw new TypeError('Column group level must be a positive integer');\n        }\n\n        if (collapsed === undefined) {\n            return this;\n        }\n\n        if (typeof collapsed === 'boolean') {\n            this.collapsed = collapsed;\n            this.hidden = collapsed;\n        } else {\n            throw new TypeError('Column group collapse flag must be a boolean');\n        }\n\n        return this; \n    }\n\n    /**\n     * @alias Column.freeze\n     * @desc Creates an Excel pane at the specificed column and Freezes that column from scolling\n     * @func Column.freeze\n     * @param {Number} jumptTo Specifies the column that the active pane will be scrolled to by default\n     * @returns {Column} Excel Column with attached methods\n     */\n    freeze(jumpTo) {\n        let o = this.ws.opts.sheetView.pane;\n        jumpTo = typeof jumpTo === 'number' && jumpTo > this.min ? jumpTo : this.min + 1;\n        o.state = 'frozen';\n        o.xSplit = this.min;\n        o.activePane = 'bottomRight';\n        o.ySplit === null ? \n            o.topLeftCell = utils.getExcelCellRef(1, jumpTo) : \n            o.topLeftCell = utils.getExcelCellRef(utils.getExcelRowCol(o.topLeftCell).row, jumpTo);\n        return this;\n    }\n}\n\nmodule.exports = Column;"]}