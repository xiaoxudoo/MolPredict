{"version":3,"sources":["../../../source/lib/row/row.js"],"names":["utils","require","_","Row","row","ws","cellRefs","collapsed","customFormat","customHeight","hidden","ht","outlineLevel","r","s","thickBot","thickTop","h","TypeError","opts","theseOpts","Object","theseFilters","filters","Array","o","autoFilter","startRow","lastRow","endRow","firstColumn","lastColumn","startCol","endCol","level","parseInt","undefined","jumpTo","sheetView","pane","state","ySplit","activePane","xSplit","topLeftCell","getExcelCellRef","getExcelRowCol","col","length","getExcelAlpha","module","exports"],"mappings":"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","file":"row.js","sourcesContent":["const utils = require('../utils.js');\nconst _ = require('lodash');\n\nclass Row {\n    /**\n     * Element representing an Excel Row\n     * @param {Number} row Row of cell\n     * @param {Worksheet} Worksheet that contains row\n     * @property {Worksheet} ws Worksheet that contains the specified Row\n     * @property {Array.String} cellRefs Array of excel cell references\n     * @property {Boolean} collapsed States whether row is collapsed when grouped\n     * @property {Boolean} customFormat States whether the row has a custom format\n     * @property {Boolean} customHeight States whether the row's height is different than default\n     * @property {Boolean} hidden States whether the row is hidden\n     * @property {Number} ht Height of the row (internal property)\n     * @property {Number} outlineLevel Grouping level of row\n     * @property {Number} r Row index\n     * @property {Number} s Style index\n     * @property {Boolean} thickBot States whether row has a thick bottom border\n     * @property {Boolean} thickTop States whether row has a thick top border\n     * @property {Number} height Height of row\n     * @property {String} spans String representation of excel cell range i.e. A1:A10\n     * @property {Number} firstColumn Index of the first column of the row containg data\n     * @property {String} firstColumnAlpha Alpha representation of the first column of the row containing data\n     * @property {Number} lastColumn Index of the last column of the row cotaining data\n     * @property {String} lastColumnAlpha Alpha representation of the last column of the row containing data\n     */\n    constructor(row, ws) {\n        this.ws = ws;\n        this.cellRefs = [];\n        this.collapsed = null;\n        this.customFormat = null;\n        this.customHeight = null;\n        this.hidden = null;\n        this.ht = null;\n        this.outlineLevel = null;\n        this.r = row;\n        this.s = null;\n        this.thickBot = null;\n        this.thickTop = null;\n    }\n\n    set height(h) {\n        if (typeof h === 'number') {\n            this.ht = h;\n            this.customHeight = true;\n        } else {\n            throw new TypeError('Row height must be a number');\n        }\n        return this.ht;\n    }\n    get height() {\n        return this.ht;\n    }\n\n    /**\n     * @alias Row.setHeight\n     * @desc Sets the height of a row\n     * @func Row.setHeight\n     * @param {Number} val New Height of row\n     * @returns {Row} Excel Row with attached methods\n     */\n    setHeight(h) {\n        if (typeof h === 'number') {\n            this.ht = h;\n            this.customHeight = true;\n        } else {\n            throw new TypeError('Row height must be a number');\n        }\n        return this;\n    }\n\n    get spans() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return `${utils.getExcelRowCol(this.cellRefs[0]).row}:${utils.getExcelRowCol(this.cellRefs[this.cellRefs.length - 1]).row}`;\n        } else {\n            return `${this.r}:${this.r}`;\n        }\n    }\n\n    get firstColumn() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return utils.getExcelRowCol(this.cellRefs[0]).col;\n        } else {\n            return 1;\n        }\n    }\n\n    get firstColumnAlpha() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return utils.getExcelAlpha(utils.getExcelRowCol(this.cellRefs[0]).col);\n        } else {\n            return 'A';\n        }  \n    }\n\n    get lastColumn() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return utils.getExcelRowCol(this.cellRefs[this.cellRefs.length - 1]).col;\n        } else {\n            return 1;\n        }\n    }\n\n    get lastColumnAlpha() {\n        if (this.cellRefs instanceof Array && this.cellRefs.length > 0) {\n            return utils.getExcelAlpha(utils.getExcelRowCol(this.cellRefs[this.cellRefs.length - 1]).col);\n        } else {\n            return 'A';\n        }  \n    }\n\n    /**\n     * @alias Row.filter\n     * @desc Add autofilter dropdowns to the items of the row\n     * @func Row.filter\n     * @param {Object} opts Object containing options for the fitler. \n     * @param {Number} opts.lastRow Last row in which the filter show effect filtered results (optional)\n     * @param {Number} opts.startCol First column that a filter dropdown should be added (optional)\n     * @param {Number} opts.lastCol Last column that a filter dropdown should be added (optional)\n     * @param {Array.DefinedName} opts.filters Array of filter paramaters\n     * @returns {Row} Excel Row with attached methods\n     */\n    filter(opts) {\n\n        let theseOpts = opts instanceof Object ? opts : {};\n        let theseFilters = opts.filters instanceof Array ? opts.filters : [];\n\n        let o = this.ws.opts.autoFilter;\n        o.startRow = this.r;\n        if (typeof theseOpts.lastRow === 'number') {\n            o.endRow = theseOpts.lastRow;\n        }\n\n        if (typeof theseOpts.firstColumn === 'number' && typeof theseOpts.lastColumn === 'number') {\n            o.startCol = theseOpts.firstColumn;\n            o.endCol = theseOpts.lastColumn;\n        }\n\n        // Programmer Note: DefinedName class is added to workbook during workbook write process for filters\n\n        this.ws.opts.autoFilter.filters = theseFilters;\n    }\n\n    /**\n     * @alias Row.hide\n     * @desc Hides the row\n     * @func Row.hide\n     * @returns {Row} Excel Row with attached methods\n     */\n    hide() {\n        this.hidden = true;\n        return this;\n    }\n\n    /**\n     * @alias Row.group\n     * @desc Hides the row\n     * @func Row.group\n     * @param {Number} level Group level of row\n     * @param {Boolean} collapsed States whether group should be collapsed or expanded by default\n     * @returns {Row} Excel Row with attached methods\n     */\n    group(level, collapsed) {\n        if (parseInt(level) === level) {\n            this.outlineLevel = level;\n        } else {\n            throw new TypeError('Row group level must be a positive integer');\n        }\n\n        if (collapsed === undefined) {\n            return this;\n        }\n\n        if (typeof collapsed === 'boolean') {\n            this.collapsed = collapsed;\n            this.hidden = collapsed;\n        } else {\n            throw new TypeError('Row group collapse flag must be a boolean');\n        }\n\n        return this;\n    }\n\n    /**\n     * @alias Row.freeze\n     * @desc Creates Worksheet panes and freezes the top pane\n     * @func Row.freeze\n     * @param {Number} jumpTo Row that the bottom pane should be scrolled to by default\n     * @returns {Row} Excel Row with attached methods\n     */\n    freeze(jumpTo) {\n        let o = this.ws.opts.sheetView.pane;\n        jumpTo = typeof jumpTo === 'number' && jumpTo > this.r ? jumpTo : this.r + 1;\n        o.state = 'frozen';\n        o.ySplit = this.r;\n        o.activePane = 'bottomRight';\n        o.xSplit === null ? \n            o.topLeftCell = utils.getExcelCellRef(jumpTo, 1) : \n            o.topLeftCell = utils.getExcelCellRef(jumpTo, utils.getExcelRowCol(o.topLeftCell).col);\n        return this;\n    }\n}\n\nmodule.exports = Row;"]}